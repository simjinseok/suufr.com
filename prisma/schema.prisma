// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Student {
  id        Int       @id @default(autoincrement())
  name      String
  notes     String
  status    String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(0)

  userId String @map("user_id") @db.Uuid

  syllabuses Syllabus[]

  @@index([userId, name, status, deletedAt])
  @@map("students")
}

model Syllabus {
  id        Int       @id @default(autoincrement())
  title     String
  notes     String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(0)

  studentId Int      @map("student_id")
  student   Student  @relation(fields: [studentId], references: [id])
  payment   Payment?
  lessons   Lesson[]

  @@index([studentId, createdAt, deletedAt])
  @@map("syllabuses")
}

model Lesson {
  id        Int       @id @default(autoincrement())
  notes     String
  lessonAt  DateTime  @map("lesson_at") @db.Timestamptz(0)
  isDone    Boolean   @default(false) @map("is_done")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(0)

  syllabusId Int      @map("syllabus_id")
  syllabus   Syllabus @relation(fields: [syllabusId], references: [id])

  feedback Feedback?

  @@index([syllabusId, lessonAt, deletedAt])
  @@map("lessons")
}

model Feedback {
  id        Int       @id @default(autoincrement())
  notes     String?
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(0)

  lessonId Int    @unique @map("lesson_id")
  lesson   Lesson @relation(fields: [lessonId], references: [id])

  @@index([lessonId, deletedAt])
  @@map("feedback")
}

model Payment {
  id            Int       @id @default(autoincrement())
  amount        Int
  paymentMethod String    @map("payment_method")
  notes         String?
  paidAt        DateTime  @map("paid_at") @db.Timestamptz(0)
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz(0)
  deletedAt     DateTime? @map("deleted_at") @db.Timestamptz(0)

  syllabusId Int      @map("syllabus_id")
  syllabus   Syllabus @relation(fields: [syllabusId], references: [id])

  @@unique([syllabusId])
  @@index([paidAt, deletedAt, syllabusId])
  @@map("payments")
}

model Meeting {
  id        Int       @id @default(autoincrement())
  name      String
  notes     String?
  phone     String?
  isDone    Boolean   @default(false) @map("is_done")
  meetingAt DateTime  @map("meeting_at") @db.Timestamptz(0)
  userId    String    @map("user_id") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(0)

  @@index([userId, name, isDone, deletedAt])
  @@map("meetings")
}
